<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd   
    http://www.springframework.org/schema/aop    
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">

      
 <!--    <bean id="exceptionHandler" class="net.crm.base.exception.MyExceptionHandler"/> 
       
    <mvc:annotation-driven />
    <aop:aspectj-autoproxy /> 
    <context:component-scan base-package="net.crm.*" ></context:component-scan>-->
    
    
    <bean id="propertyConfigurer"  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:application-dispatch.properties</value>
            </list>
        </property>
    </bean>
     <!--
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">  
        <property name="properties" ref="propertyConfigurer"/>  
    </bean>
    
    <context:property-placeholder location="classpath*:application.properties" />
     -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
        destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="initialSize" value="1" /> 
  		<property name="minIdle" value="1" /> 
  		<property name="maxActive" value="10" />
  		<!-- 配置获取连接等待超时的时间 --> 
	  	<property name="maxWait" value="10000" />
	  	<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --> 
	  	<property name="timeBetweenEvictionRunsMillis" value="60000" />
	  	<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --> 
	  	<property name="minEvictableIdleTimeMillis" value="300000" />
	  	<property name="testWhileIdle" value="true" />
	  	<!-- 这里建议配置为TRUE，防止取到的连接不可用 --> 
	  	<property name="testOnBorrow" value="true" /> 
	  	<property name="testOnReturn" value="false" />
	  	<!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> 
	  	<property name="poolPreparedStatements" value="true" /> 
	  	<property name="maxPoolPreparedStatementPerConnectionSize" 
	   	value="20" />
	  	<!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->
	  	<property name="defaultAutoCommit" value="false" />
	  	<property name="validationQuery" value="SELECT 1" />
    </bean>
 
     <!-- Bean注解: 注入Service -->
	<context:component-scan base-package="com.sdkj.dispatch.service">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
     
     <!-- 扫描mybatis 配置文件-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations" value="classpath:com/sdkj/dispatch/dao/**/*.xml" />
	</bean>

	<!-- 扫描Mapper 配置文件-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.sdkj.dispatch.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
    
    <!--5 声明式事务管理 -->
    <!--定义事物管理器，由spring管理事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--支持注解驱动的事务管理，指定事务管理器 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--6 容器自动扫描IOC组件  
    <context:component-scan base-package="com.zhangguo.bookstore"></context:component-scan>-->
    
    <!--7 aspectj支持自动代理实现AOP功能 -->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
</beans>